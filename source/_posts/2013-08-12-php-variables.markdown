---
layout: post
title: "متغیرهای PHP"
date: 2013-08-12 15:12
comments: true
categories: php-fundamental
author: فاطمه کربلایی
---
### تعریف متغیرها درPHP ###
یک متغیر در واقع مکانی برای ذخیره اطلاعات می باشد. متغیرها در PHP مانند متغیرهای ریاضی می تواند باری نگهداری مقادیر استفاده شود. نام یک متغیر می تواند یک نام کوتاه (مانند X یا Y)، یا یک نام توصیفی (مانند age، carname، totalvolume) باشدو در زبان PHP قوانینی برای نامگذاری متغیرها وجود دارد که عبارتند از :

*	نام یک متغیر با علامت $  و سپس نام متغیر شروع می شود.
*	نام یک متغیر با یک حرف یا علامت _ شروع می شود.
*	نام یک متغیر تنها می تواند شامل کاراکترهای حرفی-عددی و علامات (A-z, 0-9, and _ ) باشد.
*	در نامگذاری یک متغیر نباید از علامت فاصله  استفاده نمود.
*	نام متغیر به کوچکی و بزرگی حروف حساس است بنابراین $y و $Y دو متغیر جداگانه می باشند.

**نکته:**به طور کلی زبان PHP به کوچکی و بزرگی حروف حساس است، بنابراین تمامی عبارات، دستورات و نام متغیرهای PHP نسبت به کوچکی و بزرگی حروف حساس هستند.

### ایجاد(تعریف) متغیرهای PHP ###
در PHP برای تعریف متغیرها نیاز به نوشتن هیچ دستوری نیست، متغیرها به محض ایجاد و مقداردهی ایجاد می شوند.

**مثال:**
{% highlight php linenos %}
<?php
$txt="Hello world!";
$x=5;
?>
{% endhighlight %}
پس از اجرای عبارت بالا متغیر txt دارای مقدار Hello world! و متغیر x دارای مقدار 5 می شود.

**نکته: **
هنگامی که به یک متغیر مقدار رشته ای اختصاص می دهید در اطراف مقدار آن علامت " " قرار دهید.

### زبان نوع ضعیف  PHP  ###
همانطور که در مثال قسمت قبل ملاحظه شد، هنگامی که یک متغیر را در PHP تعریف می کنید لازم نیست مشخص کنید که این متغیر از چه نوعی می باشد. زبان PHP (به طور خودکار) با توجه به مقدار متغیرها به آنها نوع داده ای مناسب را منتسب می کند. در زبان های برنامه نویسی نوع قوی ، برنامه نویس مجبوراست که قبل از استفاده از متغیرها نوع و نام آنها را مشخص کند.

### حوزه متغیرهای PHP ###

حوزه یک متغیر بخشی از یک اسکریپت است که متغیر می تواند درآن استفاده شود و یا به آن ارجاع داده شود. در PHP چهار حوزه مختلف برای تعریف متغیرها وجود دارد:

*	حوزه محلی	 
*	حوزه عمومی 
*	حوزه ایستا 
*	حوزه پارامتر 

### حوزه محلی ###
به متغیری که در یک تابع PHP تعریف می¬شود، متغیر محلی گفته می شود. متغیر محلی فقط در داخل یک تابع قابل دسترسی می باشد:
{% highlight php linenos %}

<?php
$x=5; // حوزه عمومی

function myTest()
{
        echo $x; // حوزه محلی
}

myTest();
?>

{% endhighlight %}

**نتیجه اجرا:**
این اسکریپت هیچ خروجی ای را نشان نمی دهد. زیرا دستور echo به یک متغیر محلی $x رجوع می کند که در حوزه محلی مقدار دهی نشده است.

**نکته:**
از آنجائیکه متغیرهای محلی تنها در تابعی که در آن تعریف می شوند، قابل استفاده هستند، شما می توانید در تابع های مختلف متغیرهایی با نام های یکسان داشته باشید. در واقع متغیرهای محلی با خاتمه تابع، حذف می شوند.

### حوزه عمومی ###
متغیری که در خارج از توابع تعریف می شود، عمومی است و دارای حوزه عمومی است. متغیرهای عمومی می توانند در هر جای اسکریپت (به جز در داخل بدنه تابع) تعریف شوند. برای دستیابی به یک متغیر عمومی در داخل تابع می توانید از کلمه کلیدی global قبل از نام متغیر استفاده کنید.

**مثال:**

{% highlight php linenos %}
<?php
$x=5; // global scope
$y=10; // global scope

function myTest()
{
          global $x,$y;
           $y=$x+$y;
} 

myTest(); // run function
echo $y; // output the new value for variable $y
?>

{% endhighlight %}

**نتیجه اجرا:**
15

PHP تمامی متغیرهای عمومی را در یک آرایه به نام $GLOBALS[index] ذخیره می کند. Index نام متغیر را در خود نگهداری می کند. این آرایه می تواند از طریق توابع مورد دسترسی واقع شود و توسط آن می توان متغیرهای عمومی را مستقیماً بروزرسانی کرد. برای نمونه، می توان مثال بالا را به صورت زیر بازنویسی نمود:

{% highlight php linenos %}
<?php
$x=5;
$y=10;

function myTest()
{
$GLOBALS['y']=$GLOBALS['x']+$GLOBALS['y'];
} 

myTest();
echo $y;
?>


{% endhighlight %}

**نتیجه اجرا:**
15

### حوزه ایستا ###
به طور کلی هنگامی که یک تابع کامل می شود(به انتهای تابع می رسیم)، همه متغیرهای مربوط به آن حذف می شوند. اما در برخی موارد شما می خواهید بعضی از متغیرهای محلی حذف نشوند، تا بتوانید در جاهای دیگر برنامه از مقدار آن ها استفاده کنید. برای این کار می بایست هنگامی که برای اولین بار متغیر را ایجاد می کنید، در جلوی نام آن از کلمه کلیدی static استفاده کنید. در اینصورت هر بار که تابع فراخوانی می شود، آن متغیر اطلاعاتی که در سری قبلی(در فراخوانی قبلی تابع) داشته است در خود نگه می دارد.

لازم به ذکر است که این متغیر هنوز برای تابع محلی می باشد.

**مثال:**

{% highlight php linenos %}
<?php

function myTest()
{
     static $x=0;
     echo $x;
     $x++;
}
myTest();
myTest();
myTest();
?>


{% endhighlight %}

**نتیجه اجرا:**
012

### حوزه پارامتر ###
پارمتر، یک متغیر محلی است که مقدارش توسط فراخوانی کد  به تابع فرستاده می شود. پارامترها، در لیست پارامتر ، به عنوان بخشی از تعریف تابع، تعریف می شوند. به پارامترها، آرگومان نیز گفته می شود.(اطلاعات بیشتر در بخش توابع PHP آورده شده است)

{% highlight php linenos %}
<?php

function myTest($x)
{
      echo $x;
}

myTest(5);

?>

{% endhighlight %}

**نتیجه اجرا:**
5

### متغیرهای رشته ای در PHP ###
متغیرهای رشته ای برای نگهداری و ذخیره متون به کار می روند. در واقع این متغیرها برای نگهداری متغیرهایی که شامل کاراکترها هستند استفاده می شوندو پس از ایجاد یک متغیر رشته ای می توان روی آن اعمال محاسباتی مربوط به رشته ها را انجام داد. یک رشته می تواند به طور مستقیم در یک تابع استفاده شود و همچنین می تواند در یک متغیر ذخیره شود.
در مثال زیر یک متغیر رشته ای به نام txt ایجاد شده است و سپس به آن مقدار "Hello world!" نسبت داده شده است.

{% highlight php linenos %}
<?php
$txt="Hello world!";
echo $txt;
?>


{% endhighlight %}

**نتیجه اجرا:**
"Hello world!"

در این قسمت به معرفی برخی توابع عمومی و عملگرهای عمل کننده بر روی رشته ها در PHP پرداخته می شود.

### عملگر الحاق   ###
عملگر الحاق در PHP نقطه ‘.’ می باشد. این عملگر برای الحاق دو رشته به یکدیگر استفاده می شود. 
مثال زیر نحوه الحاق دو متغیر رشته ای به یکدیگر را نشان می دهد:



{% highlight php linenos %}
<?php
$txt1="Hello world!";
$txt2="What a nice day!";
echo $txt1 . " " . $txt2;
?>

{% endhighlight %}

**نتیجه اجرا:**
Hello world! What a nice day!

در مثال بالا دو بار از عملگر الحاق استفاده شده است. معنای “ “ این است که یک فاصله میان دو رشته txt1 و txt2 قرار داده شود.

### تابع strlen() ###

تابع strlen() طول یک رشته (تعداد کاراکترها) را برمی گرداند.

{% highlight php linenos %}
<?php
echo strlen("Hello world!");
?>
{% endhighlight %}

**نتیجه اجرا:**
12

این تابع می تواند در حلقه ها استفاده شود، بخصوص زمانیکه بخواهیم حلقه تا زمانی ادامه یابد که هنوز رشته به خاتمه نرسیده است.

### تابع strops() ###

تابع stops() برای جستجوی کاراکتر خاص در یک رشته استفاده می شود. در صورتیکه این کاراکتر یافت شود، این تابع مکان آن کاراکتر در اولین تطابق  را برمی گرداند. در صورتیکه هیچ تطابقی یافت نشود، مقدار false برگردانده می شود.
مثال بعدی کلمه word را در رشته Hello world!  جستجو می کند.

{% highlight php linenos %}
<?php
echo strpos("Hello world!","world");
?>

{% endhighlight %}

**نتیجه اجرا:**
6

همانطور که در نتیجه اجرا مشاهده می کنید موقعیت برگردانده شده 6 (و نه 7) می باشد. علت این است که موقعیت کاراکتر اول در رشته 0 است و نه 1 .
سایر توابع مربوط به رشته ها و کاربرد هرکدام از آنها در پیوست آمده است.

